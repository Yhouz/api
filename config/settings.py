"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url # Biblioteca para facilitar a configuração do banco a partir de uma URL

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# --- CONFIGURAÇÕES DE SEGURANÇA ---

# COMENTÁRIO: A SECRET_KEY NUNCA deve ficar no código. Carregue-a de uma variável de ambiente.
# No Render, defina uma variável de ambiente chamada SECRET_KEY.
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-fallback-key-para-desenvolvimento-local')

# COMENTÁRIO: DEBUG deve ser False em produção. O Render define a variável RENDER, então podemos usá-la.
# Localmente, DEBUG será True. Em produção (no Render), será False.
DEBUG = 'RENDER' not in os.environ

# COMENTÁRIO: Lógica de ALLOWED_HOSTS simplificada.
ALLOWED_HOSTS = []
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)
else:
    # Para desenvolvimento local
    ALLOWED_HOSTS.extend(['127.0.0.1', 'localhost'])


# --- APLICAÇÕES E MIDDLEWARE ---

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Apps de terceiros
    'rest_framework',
    'drf_spectacular',
    'corsheaders',
    'storages', # Necessário para o armazenamento no S3
    # Seus apps
    'api',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # WhiteNoise para servir arquivos estáticos
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Deve vir antes de CommonMiddleware
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls' # Substitua 'config' pelo nome da sua pasta de projeto

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application' # Substitua 'config' pelo nome da sua pasta de projeto


# --- BANCO DE DADOS ---

# COMENTÁRIO: As credenciais do banco de dados NUNCA devem ficar no código.
# O Neon fornece uma URL de conexão. Defina-a como uma variável de ambiente no Render.
# Ex: DATABASE_URL = postgresql://user:password@host:port/dbname
DATABASES = {
    'default': dj_database_url.config(
        # Fallback para um banco de dados SQLite local se a variável não estiver definida
        default=f'sqlite:///{os.path.join(BASE_DIR, "db.sqlite3")}',
        conn_max_age=600,
        conn_health_checks=True,
    )
}

# --- MODELO DE USUÁRIO CUSTOMIZADO ---
AUTH_USER_MODEL = 'api.Usuario' # Certifique-se que o nome do app e do modelo estão corretos


# --- VALIDAÇÃO DE SENHA E INTERNACIONALIZAÇÃO ---

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

LANGUAGE_CODE = 'pt-br'
TIME_ZONE = 'America/Sao_Paulo'
USE_I18N = True
USE_TZ = True


# --- CONFIGURAÇÃO DE ARQUIVOS ESTÁTICOS E DE MÍDIA (UPLOADS) ---

# Configurações para AWS S3 (lidas das variáveis de ambiente no Render)
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME')
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com' if AWS_STORAGE_BUCKET_NAME else None

if DEBUG:
    # --- CONFIGURAÇÕES PARA DESENVOLVIMENTO (DEBUG = True) ---
    print(">>> MODO DE DESENVOLVIMENTO ATIVADO: Usando armazenamento local.")
    
    STATIC_URL = 'static/'
    # Arquivos de mídia (uploads) salvos na pasta local 'mediafiles'
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles')

    STORAGES = {
        "default": {
            "BACKEND": "django.core.files.storage.FileSystemStorage",
        },
        "staticfiles": {
            "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
        },
    }

else:
    # --- CONFIGURAÇÕES PARA PRODUÇÃO (DEBUG = False) ---
    print(">>> MODO DE PRODUÇÃO ATIVADO: Usando armazenamento S3.")
    
    # URLs para os arquivos
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # Pasta para o collectstatic
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'

    STORAGES = {
        "default": {
            "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
            "OPTIONS": {
                "bucket_name": AWS_STORAGE_BUCKET_NAME,
                "region_name": AWS_S3_REGION_NAME,
                "location": "media",
                "file_overwrite": False,
            },
        },
        "staticfiles": {
            "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
        },
    }


# --- OUTRAS CONFIGURAÇÕES ---

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# AVISO: Em produção, restrinja para os domínios do seu frontend.
# Ex: CORS_ALLOWED_ORIGINS = ["https://meu-app-flutter.com"]
CORS_ALLOW_ALL_ORIGINS = True

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        # Se você usa JWT para autenticação, adicione-o aqui
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # Mude para IsAuthenticated quando seu sistema de login estiver pronto
        'rest_framework.permissions.AllowAny', 
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}
